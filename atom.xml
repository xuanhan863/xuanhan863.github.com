<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[huoxu.me]]></title>
  <link href="http://xuanhan863.github.com/atom.xml" rel="self"/>
  <link href="http://xuanhan863.github.com/"/>
  <updated>2012-08-10T16:24:39+08:00</updated>
  <id>http://xuanhan863.github.com/</id>
  <author>
    <name><![CDATA[Tony.lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LLVM bitcode into Python..]]></title>
    <link href="http://xuanhan863.github.com/blog/2012/08/10/llvm-bitcode-into-python-dot/"/>
    <updated>2012-08-10T14:46:00+08:00</updated>
    <id>http://xuanhan863.github.com/blog/2012/08/10/llvm-bitcode-into-python-dot</id>
    <content type="html"><![CDATA[<p>传统的Python程序员屌丝,可能会使用ctypes直接调用由C编译出来的函数,所谓的调用c的动态链接库.好处是接口简洁,兼容绝大部分的C类型数据结构..收益也很明显,大多都是为了解决性能上的问题.</p>

<pre><code>import ctypes;
h = ctypes.CDLL('**.so')
</code></pre>

<p>再说说LLVM (Low Level Virtual Machine) 一个低级别的虚拟机.. 但和JVM等等传统意义上的虚拟机不一样的是, LLVM能够在编译期优化、链接优化、甚至在线编译优化.</p>

<p>LLVM严格说来是一个编译器架构体系. 怎么说呢? 编译器的开发者仅需开发一个可以把原始码转换成LLVM的bitcode的格式(frontend),而转换至机器语言的部分则由另一批开发人员开发(backend). 这样做的好处是使得程序语言可以很轻松的跨越各种平台(LLVM在各个平台所使用的bitcode是一样的).</p>

<p>然后, 我想介绍的是这么一个东东: <a href="https://github.com/dabeaz/bitey">Bitey </a></p>

<p>它可以把以上提到的两个概念衔接到一起&#8230; 它可以将LLVM的bitcode直接导入到Python中作为一个扩展模块.</p>

<p>开始前提是, 你开启了configure &#8211;enable-shared=yes编译选项. 和安装了<a href="http://www.llvmpy.org">link text</a>llvm-py python for llvm扩展.</p>

<p><strong>Ok, 首先, 我写了一个很简单C版本的伪随机数生成器.</strong></p>

<pre><code>//srands.c
#include &lt;stdio.h&gt;                                   
#include &lt;time.h&gt;

int srandom()
{
    int i;
    srand( (unsigned)time( NULL ) );
    int random = rand();
    return random;
}
</code></pre>

<p>然后, 我通过clang 把它编译成LLVM bitcode:</p>

<pre><code>bash % clang -emit-llvm -c srands.c
</code></pre>

<p>这将会生成一个srands.o文件,它包含了LLVM bitcode. 现在,只需把它导入到Python:</p>

<pre><code>&gt;&gt;&gt; import bitey
&gt;&gt;&gt; import srands
&gt;&gt;&gt; srands.srandom()
5788877353
&gt;&gt;&gt;
</code></pre>

<p>没错,就是这样.bitey不使用C编译器,连接器,或动态装载器. 你不需要写包装函数,只需要正常的实现一个C程序,然后,编译,导入和完成.</p>

<p>bitey兼容大多数C数据类型,包括整数,浮点数,void,指针,数组和结构体.事实上因为它复用了ctypes的基础接口.</p>

<p>下面是一个稍微复杂一点的结构体数据类型的交互:</p>

<pre><code>/* point.c */
#include &lt;math.h&gt;

struct Point {
    double x;
    double y;
};

double distance(struct Point *p1, struct Point *p2) {
    return sqrt((p1-&gt;x - p2-&gt;x)*(p1-&gt;x - p2-&gt;x) +
                (p1-&gt;y - p2-&gt;y)*(p1-&gt;y - p2-&gt;y));
}
</code></pre>

<p>And then 运行:</p>

<pre><code>% clang -emit-llvm -c point.c
% python
&gt;&gt;&gt; import bitey
&gt;&gt;&gt; import point
&gt;&gt;&gt; p1 = point.Point(3,4)
&gt;&gt;&gt; p2 = point.Point(6,8)
&gt;&gt;&gt; point.distance(p1,p2)
5.0
&gt;&gt;&gt;
</code></pre>

<p>需要说明的是,LLVM的bitcode不编码结构域的名称.因此,Bitey需将它们分配给这样的索引元素变量:</p>

<pre><code>&gt;&gt;&gt; p1.e0         # (Returns the .x component)
3
&gt;&gt;&gt; p1.e1         # (Returns the .y component)
4
</code></pre>

<p>也可以使用LLVM &#8220;高级主题&#8221;中所说的预加载模块, 让你瞬间变身高富帅..</p>

<p>如果需要把两个LLVM的目标文件一起合并成一个单一的导入模块,使用llvm-ld命令:</p>

<pre><code>% llvm-ld point.o srands.o -b combined.o
% python
&gt;&gt;&gt; import bitey
&gt;&gt;&gt; import combined
&gt;&gt;&gt; combined.srandom()
5345345646
&gt;&gt;&gt; p1 = combined.Point(3,4)
&gt;&gt;&gt; p2 = combined.Point(6,8)
&gt;&gt;&gt; combined.distance(p1,p2)
5.0
&gt;&gt;&gt;
</code></pre>

<p>很多时候,我们写的C代码需要链接外部库.于是在导入之前可以采取特殊的方法来加载库.
比如:</p>

<pre><code># OS-X
% gcc -bundle -export_dynamic srands.c -o libsrands.so

# Linux
% gcc -shared srands.c -o libsrands.so
</code></pre>

<p>现在,假设有一些C代码要访问这个库:</p>

<pre><code>/* sample.c */
#include &lt;stdio.h&gt;
extern int srandom();

void print_srandom() {
    int n = 5;
    // 随机数生成,打印5次.
    while (n -- &gt;= 0) {
        printf("%d\n", srandom());
    }
}
</code></pre>

<p>你很希望它能正常执行, 但不幸的是, 它报错了&#8230;</p>

<pre><code>% clang -emit-llvm -c sample.c
% python
&gt;&gt;&gt; import bitey
&gt;&gt;&gt; import sample
LLVM ERROR: Program used external function 'srandom' which could not be resolved!
%
</code></pre>

<p>不怕不怕&#8230; 问题可以这样解决:</p>

<pre><code> % python
 &gt;&gt;&gt; import bitey
 &gt;&gt;&gt; bitey.load_library("./libsrands.so")
&lt;CDLL './libsrands.so', handle 13203afc60 at 10179d190&gt;
 &gt;&gt;&gt; import sample
 &gt;&gt;&gt; sample.print_srandom()
 354534534
 65645434
 5454535
 546456546645
 45345345
 &gt;&gt;&gt;
</code></pre>

<p>需要说明的是,Bitey不使用C编译器,连接器,动态加载程序,或者涉及子进程调用.它是完全独立的,粘合了llvm-py和ctypes的功能.</p>

<p>自动绑定</p>

<p>在以上例子中,它使用import bitey的方式来识别和加载模块.如果你想跳过这一步,让一切自动,可以创建一个bitey.pth文件,它包含了下面的声明:</p>

<pre><code>#bitey.pth
import bitey
</code></pre>

<p>现在,只需要把这个文件复制到Python的site-packages目录下.</p>

<p>That&#8217;s all..  : )</p>

<p>参考: <a href="https://github.com/dabeaz/bitey"> bitey on github </a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎么创建可靠的网络服务?]]></title>
    <link href="http://xuanhan863.github.com/blog/2012/08/08/zen-yao-chuang-jian-ke-kao-de-wang-luo-fu-wu/"/>
    <updated>2012-08-08T18:53:00+08:00</updated>
    <id>http://xuanhan863.github.com/blog/2012/08/08/zen-yao-chuang-jian-ke-kao-de-wang-luo-fu-wu</id>
    <content type="html"><![CDATA[<p>还记得若干年前的c10k问题,现今软硬件的不断更迭,开源社区的蓬勃壮大,各种问题,似乎已不是什么问题.
但还是萌生了一些想法,在此分享一些运营技巧,不限语言, 不限网站.</p>

<p>创建可扩展的和可靠的服务归结为以下:</p>

<p><strong>监视一切:</strong></p>

<pre><code>必须有一个清晰的画面在任何时间上发生了什么事.过去的表现如何,
重视日志,记录应用程序中的可觉察指标,并尽量将其可视化,可视化响应时间,pv,以及等等..
使用Google Analytics是不够的,你还需要更多强大的辅助工具.
</code></pre>

<p><strong>积极主动:</strong></p>

<pre><code>主动备份和尽早对未来负载做好规划预期,不要等到网站失去响应的时候才开始想到优化.
如果可以,度量关于你的系统可以处理多少更多的用户,这样就可以采取猜测预估,认为哪些策略可以适用.
</code></pre>

<p><strong>当崩溃发生时的通知:</strong></p>

<pre><code>使用诸如&lt;a href="http://pingdom.com/"&gt;PingDom&lt;/a&gt;类的服务
或者像&lt;a href="http://github.com/amix/crash_hound"&gt;crash_hound&lt;/a&gt;的开源库.
</code></pre>

<p><strong>你可以使用的工具</strong></p>

<p>我用了很多工具,没有必要重新造轮子,我强烈推荐他们.</p>

<p><strong>不要失去对任何事物的实时监控权</strong></p>

<p>我读到有关<a href="https://github.com/etsy/statsd/">statsd</a>和<a href="http://graphite.wikidot.com/">Graphite</a>, 和拜读了这篇文章<a href="http://instagram-engineering.tumblr.com/post/20541814340/keeping-instagram-up-with-over-a-million-new-users-in">Keeping Instagram up with over a million new users in twelve hours. </a></p>

<p>读完这篇文章后,我很兴奋,我花了一天时间去安装statsd+Graphite和运行。Graphite起步有点复杂,但收益很明显,我必须说,它改变了我的生活.这个设置可以让你实时跟踪,却没有任何性能损失（statsd使用非阻塞的UDP通讯）.我跟踪的平均响应时间,错误的数量,注册量,同步命令的平均响应时间等等,跨服务器和跨服务.</p>

<p>这是非常有用的,比如当你做了很多的部署,但你却可以很快地看到你的最新部署是否引入错误或性能问题.</p>

<p>下面是我的Graphite dashboards:</p>

<p><img src="http://amix.dk/uploads/statsd.png"></img></p>

<p><strong>监视性能,如果系统崩溃时能立刻得到通知</strong></p>

<p>Pingdom 是非常有用的一个服务,因为它可以在世界多个地点跟踪性能,当你的网站崩溃时,它可以短信通知你. 并且Pingdom也是公开的,可以让用户跟踪你的正常运行时间和性能（对用户而言,这是非常有用的服务）.</p>

<p>还有一些强大的工具,比如<a href="http://github.com/amix/crash_hound">crash_hound</a>,可以让你的程序得到通知. 例如:我收到一条短信,条件是,如果一个队列crash或它已经失去处理能力. 而我们的通知模块中,大部分都是安装使用不到10行代码的小脚本.</p>

<p>Pingdom的显页面的样子:</p>

<p><img src="http://amix.dk/uploads/pingdom.png"></img></p>

<p><strong>central logger 记录每一个错误</strong></p>

<p>我们有一个中央的日志处理系统,记录着每一个错误,并显示在一个中央位置,对应每一个错误,我们可以看到一个请求的上下文环境.这是一个非常必要的Web服务工具，因为它使你跟踪错误变的非常容易.</p>

<p>下面是我们的中央记录器看起来像:</p>

<p><img src="http://amix.dk/uploads/central_logger.png"></img></p>

<p>我相信有很多开源工具可以做到这一点（但我没有找到最适合我们的,所以我们自己实现了一套）.</p>

<p><strong>SQL monitor</strong></p>

<p>我们有一个SQL聚合查询,它记录着最耗时或最耗资源的查询记录.我们也有一个请求的记录,记录着同样的数据.</p>

<p>如果你想知道你的代码,哪一部分是值得的优化, 那么这两个工具必不可少.</p>

<p>我之前开源了一个工具<a href="http://amix.dk/blog/viewEntry/19359">request logger</a>（它使用非常简单,而且很容易hack.）</p>

<p>这里有一个截图:</p>

<p><img src="http://amix.dk/uploads/request_logger.jpg"></img></p>

<p><strong>监控服务器</strong></p>

<p>亚马逊AWS托管是一种特权，因为他们提供了很多伟大的监控工具（如CPU使用率和报警等,如果你的服务器可能使用超额的资源, 那么这种监控就很有必要）.</p>

<p>以及一些开源工具。在Plurk(一个类微博的网站)，我们使用<a href="http://www.cacti.net/">Cacti</a> 和 <a href="http://www.nagios.org/">Nagios</a>,这两个都是很复杂和强大的工具,值得你花时间去深入研究它, 因为它们可以给你以很cool的可视化图像形式显示正在运行的服务器和服务的状态.</p>

<p>下面是一些亚马逊的监测工具的截图:</p>

<p><img src="http://amix.dk/uploads/ec2.png"></img></p>

<p>我希望这些经验对你们有用.将来如:central logger or SQL monitor 这类有效的监控工具都将开源.</p>

<p>敬请关注,一如既往:happy hacking!</p>

<p>蹩脚译文出自: <a href="http://amix.dk/blog/post/19709#How-to-create-very-reliable-web-services">How to create very reliable web services </a>   Thanks amix.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个高效的Bresenham's 算法实现]]></title>
    <link href="http://xuanhan863.github.com/blog/2012/08/08/%5B%3F%5D-ge-shuai-qi-de-bresenhams-suan-fa-shi-xian/"/>
    <updated>2012-08-08T15:26:00+08:00</updated>
    <id>http://xuanhan863.github.com/blog/2012/08/08/[?]-ge-shuai-qi-de-bresenhams-suan-fa-shi-xian</id>
    <content type="html"><![CDATA[<p><strong>Bresenham算法原理解释是</strong></p>

<p><strong>　　对各行,各列像素中心先构造一组虚拟网格线,按直线从起点到终点的顺序计算直线各垂直网格线的交点,然后确定该列像素中与此交点最近的像素.
   并且可以采用增量计算,使得对于每一计算列列,只要检查一个误差项的符号,就可以确定该列所求的像素.</strong></p>

<p><strong>这里, 主要来介绍一种高效紧凑的算法实现.</strong></p>

<p>下面列出了四个C 程序的例子</p>

<p>具体的实现代码你也可以直接下载 <a href="http://free.pages.at/easyfilter/bresenham.c">bresenham.c</a></p>

<h1>Bresenham画线算法的一个简单的例子</h1>


<pre><code>void plotLine(int x0, int y0, int x1, int y1)
{
    int dx =  abs(x1-x0), sx = x0&lt;x1 ? 1 : -1;
    int dy = -abs(y1-y0), sy = y0&lt;y1 ? 1 : -1; 
    int err = dx+dy, e2; /* error value e_xy */

    for(;;){  /* loop */
      setPixel(x0,y0);
      if (x0==x1 &amp;&amp; y0==y1) break;
      e2 = 2*err;
      if (e2 &gt;= dy) { err += dy; x0 += sx; } /* e_xy+e_x &gt; 0 */
      if (e2 &lt;= dx) { err += dx; y0 += sy; } /* e_xy+e_y &lt; 0 */
    }
}
</code></pre>

<p><td><img src="http://free.pages.at/easyfilter/line.png" alt="Line"></td></tr></tr></p>

<h1>这是一个画圆的算法实现</h1>


<pre><code>void plotCircle(int xm, int ym, int r)
{
   int x = -r, y = 0, err = 2-2*r; /* II. Quadrant */ 
   do {
      setPixel(xm-x, ym+y); /*   I. Quadrant */
      setPixel(xm-y, ym-x); /*  II. Quadrant */
      setPixel(xm+x, ym-y); /* III. Quadrant */
      setPixel(xm+y, ym+x); /*  IV. Quadrant */
      r = err;
      if (r &lt;= y) err += ++y*2+1;           /* e_xy+e_y &lt; 0 */
      if (r &gt; x || err &gt; y) err += ++x*2+1; /* e_xy+e_x &gt; 0 or no 2nd y-step */
   } while (x &lt; 0);
}
</code></pre>

<p><td><img src="http://free.pages.at/easyfilter/circle.png" alt="Line"></td></tr></tr></p>

<h1>矩形,椭圆形.</h1>


<pre><code>void plotEllipseRect(int x0, int y0, int x1, int y1)
{
   int a = abs(x1-x0), b = abs(y1-y0), b1 = b&amp;1; /* values of diameter */
   long dx = 4*(1-a)*b*b, dy = 4*(b1+1)*a*a; /* error increment */
   long err = dx+dy+b1*a*a, e2; /* error of 1.step */

   if (x0 &gt; x1) { x0 = x1; x1 += a; } /* if called with swapped points */
   if (y0 &gt; y1) y0 = y1; /* .. exchange them */
   y0 += (b+1)/2; y1 = y0-b1;   /* starting pixel */
   a *= 8*a; b1 = 8*b*b;

   do {
       setPixel(x1, y0); /*   I. Quadrant */
       setPixel(x0, y0); /*  II. Quadrant */
       setPixel(x0, y1); /* III. Quadrant */
       setPixel(x1, y1); /*  IV. Quadrant */
       e2 = 2*err;
       if (e2 &lt;= dy) { y0++; y1--; err += dy += a; }  /* y step */ 
       if (e2 &gt;= dx || 2*err &gt; dy) { x0++; x1--; err += dx += b1; } /* x step */
   } while (x0 &lt;= x1);

   while (y0-y1 &lt; b) {  /* too early stop of flat ellipses a=1 */
       setPixel(x0-1, y0); /* -&gt; finish tip of ellipse */
       setPixel(x1+1, y0++); 
       setPixel(x0-1, y1);
       setPixel(x1+1, y1--); 
   }
}
</code></pre>

<p><td><img src="http://free.pages.at/easyfilter/ellipse.png" alt="Line"></td></tr></tr></p>

<h1>渐变的贝塞尔曲线<Bézier curve>.</h1>


<pre><code>void plotBasicBezier(int x0, int y0, int x1, int y1, int x2, int y2)
{                            
  int sx = x2-x1, sy = y2-y1;
  long xx = x0-x1, yy = y0-y1, xy;         /* relative values for checks */
  double dx, dy, err, cur = xx*sy-yy*sx;                    /* curvature */

  assert(xx*sx &lt;= 0 &amp;&amp; yy*sy &lt;= 0);  /* sign of gradient must not change */

  if (sx*(long)sx+sy*(long)sy &gt; xx*xx+yy*yy) { /* begin with longer part */ 
    x2 = x0; x0 = sx+x1; y2 = y0; y0 = sy+y1; cur = -cur;  /* swap P0 P2 */
  }  
  if (cur != 0) {                                    /* no straight line */
    xx += sx; xx *= sx = x0 &lt; x2 ? 1 : -1;           /* x step direction */
    yy += sy; yy *= sy = y0 &lt; y2 ? 1 : -1;           /* y step direction */
    xy = 2*xx*yy; xx *= xx; yy *= yy;          /* differences 2nd degree */
    if (cur*sx*sy &lt; 0) {                           /* negated curvature? */
      xx = -xx; yy = -yy; xy = -xy; cur = -cur;
    }
    dx = 4.0*sy*cur*(x1-x0)+xx-xy;             /* differences 1st degree */
    dy = 4.0*sx*cur*(y0-y1)+yy-xy;
    xx += xx; yy += yy; err = dx+dy+xy;                /* error 1st step */    
    do {                              
      setPixel(x0,y0);                                     /* plot curve */
      if (x0 == x2 &amp;&amp; y0 == y2) return;  /* last pixel -&gt; curve finished */
      y1 = 2*err &lt; dx;                  /* save value for test of y step */
      if (2*err &gt; dy) { x0 += sx; dx -= xy; err += dy += yy; } /* x step */
      if (    y1    ) { y0 += sy; dy -= xy; err += dx += xx; } /* y step */
    } while (dy &lt; 0 &amp;&amp; dx &gt; 0);   /* gradient negates -&gt; algorithm fails */
  }
  plotLine(x0,y0, x2,y2);                  /* plot remaining part to end */
}  
</code></pre>

<p><td><img src="http://free.pages.at/easyfilter/bezier.png" alt="Line"></td></tr></tr></p>

<h2>算法特点:</h2>


<blockquote><p>通用: 线,圆形,椭圆形,贝塞尔曲线等.</p>

<p>快速: 绘制复杂曲线非常快.</p>

<p>简单: 短而紧凑.</p>

<p>精确: 近似的精确曲线.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个很cool的项目: r³]]></title>
    <link href="http://xuanhan863.github.com/blog/2012/07/27/%5B%3F%5D-ge-hen-coolde-xiang-mu-r3/"/>
    <updated>2012-07-27T18:28:00+08:00</updated>
    <id>http://xuanhan863.github.com/blog/2012/07/27/[?]-ge-hen-coolde-xiang-mu-r3</id>
    <content type="html"><![CDATA[<p>r³ 是一个基于python的map reduce 引擎. 后端使用redis, 它的设计理念是:To be simple.</p>

<p>和任意一个MapReduce理论完备的项目[Haoop,Spark,Dpark..etc]一样.
它也分为: 输入流, mappers 和 reducers, 三个处理步骤.</p>

<p><img src="https://github.com/heynemann/r3" alt="image alt" /></p>

<h3>图显示不了了, 原因不明</h3>


<p>实践验证理论, Let&#8217;s do it.</p>

<p>先简单的通过pip安装:</p>

<pre><code>pip install r3
</code></pre>

<p>安装完之后, 会有三个命令:r3-app, r3-map,  r3-web.</p>

<p>看一个常见的Mapreduce场景计算: 对文档单词量的统计.</p>

<p>得有一个存储数据的地方,我先假设你有一个redis实例, 运行在 127.0.0.1:7778</p>

<p>运行:</p>

<pre><code>r3-app --redis-port=7778 --redis-pass=r3 -c config.py
</code></pre>

<p>上边运行的config.py, 作为一个接口配置, 它包含了输入和reduce的输出:</p>

<pre><code>INPUT_STREAMS = [
    'test.count_words_stream.CountWordsStream'
]

REDUCERS = [
    'test.count_words_reducer.CountWordsReducer'
]
</code></pre>

<p>Ok, 首先接触Input Stream.</p>

<p>一个典型的输入流场景,对文档样本进行计数的话,首先应该打开输入流处理器类的文件,读取文件中的行,然后返回的每一行给r3-app.</p>

<p><strong>input stream</strong></p>

<p>它可能是这样的:</p>

<pre><code>from os.path import abspath, dirname, join

class CountWordsStream:
    job_type = 'count-words'
    group_size = 1000

    def process(self, app, arguments):
        with open(abspath(join(dirname(__file__), 'chekhov.txt'))) as f:
            contents = f.readlines()

        return [line.lower() for line in contents]
</code></pre>

<p>指定一个job的类型: job_type = &#8216;count-words&#8217;
group_size = 1000,指定了一个输入流的大小.. 比如:1000, 那每个mapper分配到的处理大小就是1000行, 每1000行, 当做一次Input Stream做一次map.</p>

<p><strong>Running Mappers</strong></p>

<p>使用一个CountWordsMapper类来运行我们的映射.</p>

<pre><code>r3-map --redis-port=7778 --redis-pass=r3 --mapper-key=mapper-1 --mapper-class="test.count_words_mapper.CountWordsMapper"
</code></pre>

<p>它继承自r3 worker的Mapper类.</p>

<pre><code>from r3.worker.mapper import Mapper

class CountWordsMapper(Mapper):
    job_type = 'count-words'

    def map(self, lines):
        return list(self.split_words(lines))

    def split_words(self, lines):
        for line in lines:
            for word in line.split():
                yield word, 1
</code></pre>

<p><strong>Reducing</strong></p>

<p>在所有Input Stream都已经被Mapper合并处理后.. 这是一个连续的过程.. 我猜想, 应该和Dpark 类似, 也是lazy的. 需要数据时才会真正计算.</p>

<p>那么, Reduce 应该这样写了:</p>

<pre><code>from collections import defaultdict

class CountWordsReducer:
    job_type = 'count-words'

    def reduce(self, app, items):
        word_freq = defaultdict(int)
        for line in items:
            for word, frequency in line:
                word_freq[word] += frequency

        return word_freq
</code></pre>

<p>必须得指定job_type, 这可是reduce和map的血脉关系所在.. = =</p>

<p><strong>测试</strong></p>

<p>我们已经有一个R3应用程序运行在<a href="http://localhost:8888/count-words">http://localhost:8888</a>.</p>

<p>通过<a href="http://localhost:8888/count-words">http://localhost:8888/count-words</a> 访问我们刚刚的文档统计job.</p>

<p><strong>r³ 基于web的监控台 </strong></p>

<p><img src="https://github.com/heynemann/r3/raw/master/r3-web-4.jpg" alt="image alt" /></p>

<p><strong>状态</strong></p>

<p><img src="https://github.com/heynemann/r3/raw/master/r3-web-3.jpg" alt="image alt" /></p>

<p>项目地址: <code>[https://github.com/heynemann/r3][6]</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git tricks: stash]]></title>
    <link href="http://xuanhan863.github.com/blog/2012/07/27/git-tricks-stash/"/>
    <updated>2012-07-27T17:33:00+08:00</updated>
    <id>http://xuanhan863.github.com/blog/2012/07/27/git-tricks-stash</id>
    <content type="html"><![CDATA[<blockquote><p>Git tricks: stash</p>

<p>Git’s stash functionality is something
that you won’t need very often (in my
experience, ever) if you’re just
hacking away at something in private.
However, as soon as you introduce
other factors
- a boss, say - you’ll find you need to tweak your work-flow to make
yourself more interruptible.</p>

<p>Sometimes, something needs fixing
ASAP, and you have 260 build-breaking
lines an hour away from being
commit-worthy - you want to store that
code safely somewhere while you work
on the emergency. Without git stash,
you have two possibilities.</p></blockquote>

<ol>
<li><p>Create a temporary branch, commit
the broken code, and later abuse git
reset to undo the commit, Pure git,
very ugly, and it’s easy to bork
things with the git reset call.</p></li>
<li><p>Clone a new copy of the repository.
Much simpler, but not feasible for
larger repositories, and incredibly
hacky.</p></li>
</ol>


<p>Git stash introduces the idea of a temporary commit, orphaned in the sense that it does not belong to any branch, but can be restored later, on top of any other commit. The simplest usage:</p>

<pre><code>$ git stash
$ fix emergency
$ git commit -a -m "Emergency fix"
$ git stash pop
</code></pre>

<p>Of course, this being git, every feature has to be a little more powerful than that. The commit stored by stash is just like any other commit - it’s a patch which can be applied anywhere. Say you have a lot of branches flying around, and you accidentally start to make a change to the wrong one:</p>

<pre><code>$ git checkout widget-a
$ # add widget B
$ git stash -u
$ git checkout widget-b
$ git stash pop
</code></pre>

<p>The -u (equivalent to &#8211;include-untracked) put all untracked files in the stash as well, meaning that when you check out widget-b, you won’t have to re-compile your changes.</p>

<p>Or say you want to pull without committing, but some of your changes conflict:</p>

<pre><code>$ git stash &amp;&amp; git pull &amp;&amp; git stash pop
</code></pre>

<p>You can also drop and list stashes, and apply them without removing them from the stash stack.</p>

<p>Article from : [http://bytbox.net/blog/2012/07/git-stash.html][1]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First blog with octopress]]></title>
    <link href="http://xuanhan863.github.com/blog/2012/07/25/first-blog-with-octopress/"/>
    <updated>2012-07-25T16:24:00+08:00</updated>
    <id>http://xuanhan863.github.com/blog/2012/07/25/first-blog-with-octopress</id>
    <content type="html"><![CDATA[<p>CU 和 GAE上的Blog 停止维护. 注册了新域名 <a href="http://huoxu.me">huoxu.me</a> 感谢关注.</p>

<p>尝试使用octopress 基于github pages 的方式写blog.</p>

<p>======================</p>

<blockquote><p>其中还是有很多个坑的. 但是上手很快.</p>

<blockquote><p>另 发现一个Octopress Markdown 语法高亮插件, 聊胜于无.</p></blockquote>

<h2><a href="https://github.com/tangledhelix/vim-octopress">vim-octopress</a></h2>

<p>参考
[1]:    <a href="http://en.wikipedia.org/wiki/Markdown">Markdown</a>
[2]:    <a href="http://octopress.org/docs/blogging/">octopress</a></p></blockquote>
]]></content>
  </entry>
  
</feed>
